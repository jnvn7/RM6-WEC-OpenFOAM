#!/usr/bin/env python3
##--------------------------------------------------------------------------------#
# Script to plot the 3DoF Motion from  Output.txt file generated by extractLog.sh
# Usage: python plotMotion.py OF_case_directory (single or multiple cases)
##--------------------------------------------------------------------------------#
import sys
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.spatial.transform import Rotation
#---------------------------------Plot settings-----------------------------#
#plt.rcParams['figure.dpi'] = 400
colors = np.array(
['#4477AA', # blue
  '#66CCEE', # cyan
  '#228833', # green
  '#CCBB44', # yellow
  '#EE6677', # red
  '#AA3377', # purple
  '#BBBBBB'] # grey]
)

# colormap from: https://personal.sron.nl/~pault/
plt.rcParams['axes.prop_cycle'] = plt.cycler(color=colors)

##--------------------------------------------------------------------------------#
# Read input data file
def readData(filename):
    ufData = pd.read_csv(filename, sep="\s+|\t,", header=None, skiprows=6,
                                    names = range(100), engine="python")

    time = ufData[0]
    surge = ufData[1]
    heave = ufData[3]

    Xr = np.array([[ufData[4],ufData[5],ufData[6]],
               [ufData[7],ufData[8],ufData[9]],
               [ufData[10],ufData[11],ufData[12]]])

    ## Compute euler angle from rotational matrix
    pitch = []
    roll = []
    yaw = []
    for i in range(len(time)):
        rotM = np.zeros([3,3])
        for j in range(3):
            rotM[0][j] = float(Xr[0][j][i])
            rotM[1][j] = float(Xr[1][j][i])
            rotM[2][j] = float(Xr[2][j][i])

        rotM =  Rotation.from_matrix(rotM)
        XrEuler = rotM.as_euler("zyx",degrees=True)
        roll.append(XrEuler[2])
        pitch.append(XrEuler[1])
        yaw.append(XrEuler[0])

    surge -= surge[0]
    heave -= heave[0]

    return time, surge, heave, pitch, roll, yaw
##--------------------------------------------------------------------------------#
# Read inputs
nCases = len(sys.argv)-1
if (nCases < 1):
    print('\nMissing case input(s) for plotting!')
    print('\nUsage: \n \t python plotMotion.py OF_case_directories\n')
    sys.exit(1)

# Plotting outputs
fig, axs = plt.subplots(3,1,figsize=(8,6), tight_layout=True)
for case in sys.argv[1:]:
    time, surge, heave, pitch, _, _ = readData(os.path.join(case,"Output.txt"))

    axs[0].plot(time, surge, label=case)
    axs[1].plot(time, heave, label=case)
    axs[2].plot(time, pitch, label=case)

yLabels = ['Surge (m)','Heave (m)','Pitch (deg)']
for i in range(3):
    axs[i].legend()
    axs[i].set_ylabel(yLabels[i])

axs[-1].set_xlabel('Time (s)')

plt.legend()
plt.show()
