#!/usr/bin/env python3
##------------------------------------------------------------------------------------------#
# Script to plot total forces on WEC from Tensions.txt file generated by extractTensions.sh
# Usage: python plotForces.py OF_case_directory (single or multiple cases)
##------------------------------------------------------------------------------------------#
import sys
import os
import numpy as np
import matplotlib.pyplot as plt
#-----------------------------------Plot settings---------------------------------#
#plt.rcParams['figure.dpi'] = 400
colors = np.array(
['#4477AA', # blue
  '#66CCEE', # cyan
  '#228833', # green
  '#CCBB44', # yellow
  '#EE6677', # red
  '#AA3377', # purple
  '#BBBBBB'] # grey]
)

# colormap from: https://personal.sron.nl/~pault/
plt.rcParams['axes.prop_cycle'] = plt.cycler(color=colors)

##--------------------------------------------------------------------------------#
# Read input data file
def readData(filename):
    data = np.loadtxt(filename, dtype=float, skiprows=6)
    nLines = data.shape[1]//3

    time = data[:,0]
    tensions = []
    for lineN in range(nLines):
        tTemp = np.sqrt(data[:,3*lineN+1]**2 + data[:,3*lineN+2]**2 + data[:,3*lineN+3]**2)
        tensions.append(tTemp)

    return time, tensions

##--------------------------------------------------------------------------------#
# Read inputs
nCases = len(sys.argv)-1
if (nCases < 1):
    print('\nMissing case input(s) for plotting!')
    print('\nUsage: \n \t python plotForces.py OF_case_directories\n')
    sys.exit(1)

# Plotting outputs
nLines = 3      # Numbers of mooring lines used in the simulations
fig, axs = plt.subplots(nLines,1,figsize=(8,6), tight_layout=True)
for case in sys.argv[1:]:
    time, tensions = readData(os.path.join(case,"Tensions.txt"))

    for i in range(nLines):
        axs[i].plot(time, tensions[i], label=case)

for i in range(nLines):
    axs[i].set_ylabel('Line '+str(i+1)+' (N)')

axs[-1].legend()
axs[-1].set_xlabel('Time (s)')

plt.legend()
plt.show()
