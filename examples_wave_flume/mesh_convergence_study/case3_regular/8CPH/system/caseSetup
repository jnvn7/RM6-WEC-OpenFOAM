/*--------------------------------*- C++ -*----------------------------------*\
|              OpenFOAM Wave Tank and Wave Setup Script                       |
|                                                                             |
|   Description: script to calculate blockMesh and waveProperties parameters  |
|   Author: JN                                                                |
|   Contact: nnguye@sandia.gov                                                |
|                                                                             |
\*---------------------------------------------------------------------------*/

#include "../flowParams";

// Constants

	PI	#eval { pi() };
        g       9.81;

// Calc wavelength based on deep water wave approximation

    waveLength      #eval { $g/(2.0*$PI)*$wavePeriod*$wavePeriod };

// Wave Tank Dimensions

    #if #eval {$tankLength == 0}
        tankLength      #eval { $lengthContr*$waveLength };
    #endif

    #if #eval {$tankHeight == 0}
        tankHeight      #eval { 2.0*$waterDepth };
    #endif

// Cell sizes

    deltaX  #eval { $waveLength/$xContr };
    deltaZ  #eval { $waveHeight/$zContr };

// blockMeshDict parameters

    // Setup cell numbers;

    #if #eval {$sim3D == 0}
        tankWidth     #eval { 2*$deltaX; };
        yCells          1;
    #elif #eval {$sim3D == 1}
        yCells          #eval { round ( $tankWidth/$deltaX ) };
    #else
        flagErr         #codeStream
            {
                code
                #{
                        Info << nl << "Error: sim3D value is out of range!" << nl << nl;
                        const int err=1;
                        std::exit(err);
                #};
            };
    #endif

    s1              $tankLength;
    s2              #eval { $tankWidth/2.0 };
    sA              #eval { $tankHeight - $waterDepth };
    sB              #eval { -$waterDepth };
    sRefine         #eval { $waveHeight*$hContr/2 };

    xCells          #eval { round($tankLength*$xContr/$waveLength) };
    zCells_ref      #eval { round($hContr*$zContr/2) };

    tempA           #eval { 1-$sA/$deltaZ*(1-$zExpContr) };
    tempB           #eval { 1+$sB/$deltaZ*(1-$zExpContr) };
    zCells_A        #eval { round(log($tempA)/log($zExpContr)) };
    zCells_B        #eval { round(log($tempB)/log($zExpContr)) };
    zGradingA       #eval { pow($zExpContr,$zCells_A-2) };
    zGradingB       #eval { 1/pow($zExpContr,$zCells_B-2) };

// Time control
    rampTime        #eval { 2.0*$wavePeriod };

    #if #eval { $endTime == 0 }
        #if #eval { $waveType == 0 }
            endTime #eval { 20*$wavePeriod };
        #elif #eval { $waveType == 1 } 
            endTime #eval { 500*$wavePeriod };
        #else
            flagErr        #codeStream
            {
                code
                #{
                    Info << nl << "'Invalid waveType input. 0: Regular Waves. 1: Irregular Waves." << nl << nl;
                    const int err=1;
                    std::exit(err);
                #};
            };
        #endif
    #endif

// Wave Probes
    Probe1          #eval { $Probe1*$waveLength };
    Probe2          #eval { $Probe2*$waveLength };
    Probe3          #eval { $Probe3*$waveLength };
    Probe4          #eval { $Probe4*$waveLength };
    Probe5          #eval { $Probe5*$waveLength };

// ************************************************************************* //

