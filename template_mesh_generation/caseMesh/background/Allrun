#!/bin/sh
cd "${0%/*}" || exit                                # Run from this directory
. ${WM_PROJECT_DIR:?}/bin/tools/RunFunctions        # Tutorial run functions
#------------------------------------------------------------------------------#
## Clean residue files
./Allclean

# Read in user settings
inputFile='flowParams'
cp ../../$inputFile .

sim3D=$(grep "sim3D" flowParams | tr -d ';' | awk '{print $2}')
objName=$(grep "objName" $inputFile | tr -d ';' | awk '{print $2}')
baffleName=$(grep "baffleName" $inputFile | tr -d ';' | awk '{print $2}')

# Move CAD and input files to the respective folders
cp ../../$objName constant/triSurface/
if [ -n "$baffleName" ]; then
    cp ../../$baffleName constant/triSurface/
fi

# Extract Body Surface and make 3D mesh from the provided CAD file.
surfaceFeatureExtract | grep -i 'bounding box' | tr -d '()' >> constant/objBoundingBox

# Run python script to get meshing parameters
python3 ../../scripts/setCase.py -b
if [ $? -ne 0 ]; then
  exit 1
fi

#------------------------------------------------------------------------------#
## Grid generation
# Run BlockMesh
if [ $sim3D -eq 0 ]; then
    runApplication blockMesh -dict system/blockMeshDict2D
elif [ $sim3D -eq 1 ]; then
    runApplication blockMesh
else
    echo "Specify 2D or 3D meshing."
    exit 1
fi

if [ $? -ne 0 ]; then
    echo "Run blockMesh Failed. Program is stopped!"
    exit 1
fi

# Decompose mesh case
runApplication decomposePar
if [ $? -ne 0 ]; then
  echo "DecomposePar failed. Program is stopped!"
  exit 1
fi

#Run SnappyHexMesh
runParallel snappyHexMesh -overwrite
if [ $? -ne 0 ]; then
  echo "Background SnappyHexMesh failed. Program is stopped!"
  exit 1
fi

# Reconstruct case
runApplication reconstructParMesh -constant
if [ $? -ne 0 ]; then
  echo "reconstructPar failed. Program is stopped!"
  exit 1
fi

#------------------------------------------------------------------------------#
## For 2D grid generation
if [ $sim3D -eq 0 ]; then
  # Make a 2D mesh by extruding a patch and solve to steady state.
  # Run extrudeMesh for background mesh
  runApplication extrudeMesh -dict system/extrudeMeshDict2D
  if [ $? -ne 0 ]; then
    echo "Run Object extrudeMesh Failed. Program is stopped!"
    exit 1
  fi

  runApplication createPatch -dict system/createPatchDict2D -overwrite
  if [ $? -ne 0 ]; then
    echo "Run Object createPatch Failed. Program is stopped!"
    exit 1
  fi
fi

# Make VTK
#runApplication foamToVTK -constant

#------------------------------------------------------------------------------#

